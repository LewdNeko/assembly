## 1.3.1
(date: Feb * 2020)
- _db.StorageObjectType, convert external string to storage object. When a string of a URL is provided instead of of the object.
- scripts.py: (Mohamed Cherkaoui, @chermed) add show:routes to the CLI.
- Exposed flash, session from flask for convenience
- Markdown: Support extensions .md, .mkd, .markdown, .mkdown
- Fixed inject_block. Now it is scoped to the request.endpoint, to prevent leakage of blocks 
- flash_data(data, key=None) and get_flashed_data() -> tuple(data, key). Key is to identify the data 
- rename folder '/lib' to '/includes'
- 'inject_block' & 'inject_into' extension to add content from subtemplate
  ```
    {% inject_block "css" %}

    {% inject_into "css" %}
      <style>
      ...
      </style>
    {% endinject_into %}

  ```
## 1.3.0
(date: Dec 25 2019)
- ** Restructure application layout
    $ROOT/
      |- wsgi.py
      |- requirements.txt
      |-/views/ :contains the views
      |-/templates/ :contains templates
      |-/static/ :contains static file and non user-generated data
      |-/lib/ "contains shared code
        |- config.py
        |- models.py
      |-/run/ :contains executables and scripts
        |- scripts.py
      |-/data/ :contains random files and user-generated data
- Added Flask-Login extension. And have ext.login_manager to access FL setup
- forms validation with WTForms
- flash_data, get_flashed_data: to add data instead of message for the user
- `Assembly.initialize`, can now accept Flask instance as first argument to make it work with 
  existing flask application.
- Expose asm functions as *. Now all functions in asm will be available from assembly
- Models are explicit, must be loaded manually
- Consolidate CLI asm-admin to asm
- rename cli.py to scripts.py 
- Add Boxie configuration to deploy on own server
- Update doc
- Changed route endpoint format "module.x.Y:z" to "module.x.Y.z", with dot instead. 
- new scripts command: 'asm gen:view' to generate views
- Added @decorate, to apply a decorator to all methods, 
  usually when a decorator was meant for only function. ie 
  ```  
  @decorate(login_required)
  class Index(Assembly):
    ...
  ```


## 1.2.0
(Nov 27 2019)

- Update CLI `asm-admin sync-models` to execute `Model.__sync__()` to run routines on a table 
  upon creating or updating a table.


## 1.1.0
(Nov 24 2019)

- added set_cookie(), get_cookie(), delete_cookie()
- rename module 'extensions' to '_extensions' to indicate not to import

---

## 1.0.1
(Nov 20 2019)

- Added dependencies: pyyaml

---

## 1.0.0
(Nov 17 2019)

